package es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions;

import java.util.ArrayList;
import java.util.Random;

import es.ucm.fdi.ici.Action;
import es.ucm.fdi.ici.c2324.practica2.grupoYY.ghosts.Utiles;
import pacman.game.Constants.DM;
import pacman.game.Constants.GHOST;
import pacman.game.Constants.MOVE;
import pacman.game.Game;

public class MoveToEmptySectionAction implements Action {

	private GHOST ghost;

	private int[][] sections = { // Xmin, Xmax, Ymin, Ymax
		{0, 52, 0, 58}, //Sector arriba izq
		{53, 104, 0, 58}, //Sector arriba der
		{0, 52, 59, 116}, //Sector abajo izq
		{53, 104, 59, 116} //Sector abajo der
	};
	
	public MoveToEmptySectionAction(GHOST ghost) {
		this.ghost = ghost;
	}

	@Override
	public MOVE execute(Game game) {
	
		if (game.doesGhostRequireAction(ghost)) {        //if it requires an action
		
			if(Utiles.getGhostSection1() != ghost || Utiles.getGhostSection2() != ghost || Utiles.getGhostSection3() != ghost || Utiles.getGhostSection4() != ghost){
				
				if(Utiles.getGhostSection1() == null ) {
					Utiles.setGhostSection1(ghost);
					return moveToSection(game, 0);
				}
				else if(Utiles.getGhostSection2() == null) {
					Utiles.setGhostSection1(ghost);
					return moveToSection(game, 1);
				}
				else if(Utiles.getGhostSection3() == null) {
					Utiles.setGhostSection1(ghost);
					return moveToSection(game, 2);
				}
				else if(Utiles.getGhostSection4() == null) {
					Utiles.setGhostSection1(ghost);
					return moveToSection(game, 3);
				}
			}
			
			return game.getApproximateNextMoveAwayFromTarget(game.getGhostCurrentNodeIndex(ghost), game.getPacmanCurrentNodeIndex(), game.getGhostLastMoveMade(ghost), DM.PATH);
		}
		
		return MOVE.NEUTRAL;
	}

	@Override
	public String getActionId() {
		return ghost + "moves to empty section";
	}

	private MOVE moveToSection(Game game, int section) {
		
		int[] cruces = game.getJunctionIndices(); 		
  		ArrayList<Integer> cuadrante= new ArrayList<Integer>();
  		
		for(int i = 0; i < cruces.length; i++){

  			if(isInSection(section, cruces[i], game)) {
  			cuadrante.add(cruces[i]);
  			}
  		}
  		
  		if(cuadrante.isEmpty()) 
  			return game.getApproximateNextMoveAwayFromTarget(game.getGhostCurrentNodeIndex(ghost), game.getPacmanCurrentNodeIndex(), game.getGhostLastMoveMade(ghost), DM.PATH);
  		
  		Random r = new Random(cuadrante.size());// va a un cruce aleatorio del cuadrante
  		return game.getApproximateNextMoveTowardsTarget(game.getGhostCurrentNodeIndex(ghost), cuadrante.get(r.nextInt()), game.getGhostLastMoveMade(ghost), DM.PATH);
	}

	public boolean isInSection(int section, int index, Game game) {

		if(sections[section][0] <= game.getNodeXCood(index) && game.getNodeXCood(index) <= sections[section][1] 
		&& sections[section][2] <= game.getNodeYCood(index) && game.getNodeXCood(index) <= sections[section][3])
			return true;
		else
			return false;
	}

	public int getSection(int index, Game game){

		int centroX = 52;
        int centroY = 58;

		//sectores:
		//{0, 1}
		//{2, 3}

        if (game.getNodeXCood(index) < centroX) {
            if (game.getNodeYCood(index) < centroY) {
                return 0;
            } else {
                return 2;
            }
        } else {
            if (game.getNodeYCood(index) < centroY) {
                return 1;
            } else {
                return 3;
            }
        }
	}
}
