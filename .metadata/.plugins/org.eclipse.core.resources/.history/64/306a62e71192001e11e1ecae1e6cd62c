package es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions;


import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.Utiles;
import es.ucm.fdi.ici.rules.RulesAction;
import jess.Fact;
import jess.JessException;
import jess.Value;
import pacman.game.Constants.DM;
import pacman.game.Constants.GHOST;
import pacman.game.Constants.MOVE;
import pacman.game.Game;

public class GetCloseToAliveGhostAction implements RulesAction {
	
	GHOST ghost;
	String protect;//nombre del fantasma que protege
	public GetCloseToAliveGhostAction(GHOST ghost) {
		this.ghost = ghost;
	}

	@Override
	public MOVE execute(Game game) {
		
		Utiles.emptySection(ghost);
		
		 if (game.doesGhostRequireAction(ghost)) {        //if it requires an action
			int pos = posGhost(protect,game);
			return game.getApproximateNextMoveTowardsTarget(game.getGhostCurrentNodeIndex(ghost), pos, game.getGhostLastMoveMade(ghost), DM.PATH);
		 }
		return MOVE.NEUTRAL;
	}

	@Override
	public String getActionId() {
		
		return ghost+" moves to alive ghost";
	}

	@Override
	public void parseFact(Fact actionFact) {
		try {
			Value value = actionFact.getSlotValue("ghost");
			if(value == null)
				return;
			String strategyValue = value.stringValue(null);
			protect= String.valueOf(strategyValue);
		} catch (JessException e) {
			e.printStackTrace();
		}
		
	}
	private int posGhost(String name,Game game) {
		switch(name) {
		case "SUE":
			return game.getGhostCurrentNodeIndex(GHOST.SUE);
		case "BLINKY":
			return game.getGhostCurrentNodeIndex(GHOST.BLINKY);
		case "INKY":
			return game.getGhostCurrentNodeIndex(GHOST.INKY);
		case "PINKY":
			return game.getGhostCurrentNodeIndex(GHOST.PINKY);
		}
		return -1;
	}
}
