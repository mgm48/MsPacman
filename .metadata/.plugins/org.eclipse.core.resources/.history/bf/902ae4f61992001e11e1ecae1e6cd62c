package es.ucm.fdi.ici.c2324.practica4.grupo03;

import java.io.File;
import java.util.EnumMap;
import java.util.HashMap;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.GhostsInput;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.BlockClosePPAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.BlockNextJuntionAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.BlockSectionAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.ChaseAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.GetCloseToAliveGhostAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.MoveAwayGhostAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.MoveAwayPPAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.MoveToEmptySectionAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.ProtectAction;
import es.ucm.fdi.ici.c2324.practica4.grupo03.ghosts.actions.RunAwayAction;
import es.ucm.fdi.ici.rules.RuleEngine;
import es.ucm.fdi.ici.rules.RulesAction;
import es.ucm.fdi.ici.rules.RulesInput;
import es.ucm.fdi.ici.rules.observers.ConsoleRuleEngineObserver;
import pacman.controllers.GhostController;
import pacman.game.Constants.GHOST;
import pacman.game.Constants.MOVE;
import pacman.game.Game;

public class Ghosts  extends GhostController  {
	private static final String RULES_PATH = "es"+File.separator+"ucm"+File.separator+"fdi"+File.separator+"ici"+File.separator+"c2324"+File.separator+"practica4"+File.separator+"grupo03"+File.separator;
	HashMap<String,RulesAction> map;
	
	EnumMap<GHOST,RuleEngine> ghostRuleEngines;
	RuleEngine sectionengine;
	
	public Ghosts() {
		setName("Ghosts 03");
		setTeam("Team 03");
		
		map = new HashMap<String,RulesAction>();
		//Fill Actions
		// Acciones de Blinky
		RulesAction BLINKYchases = new ChaseAction(GHOST.BLINKY);
		RulesAction BLINKYrunsAway = new RunAwayAction(GHOST.BLINKY);
		RulesAction BLINKYrunsAwayMSPACMANclosePPill = new MoveAwayPPAction(GHOST.BLINKY);
		RulesAction BLINKYrunsAwayEdibleGhosts = new MoveAwayGhostAction(GHOST.BLINKY);
		RulesAction BLINKYrunsToProtectingGhosts = new GetCloseToAliveGhostAction(GHOST.BLINKY);
		RulesAction BLINKYblocksPowerPills = new BlockClosePPAction(GHOST.BLINKY);
		RulesAction BLINKYblocksNextJunction = new BlockNextJuntionAction(GHOST.BLINKY);
		RulesAction BLINKYprotect = new ProtectAction(GHOST.BLINKY);
		RulesAction BLINKYblockSection = new BlockSectionAction(GHOST.BLINKY);
		RulesAction BLINKYSectionActions =new MoveToEmptySectionAction(GHOST.BLINKY);
		//Aciones de INKY
		RulesAction INKYchases = new ChaseAction(GHOST.INKY);
		RulesAction INKYrunsAway = new RunAwayAction(GHOST.INKY);
		RulesAction INKYrunsAwayMSPACMANclosePPill = new MoveAwayPPAction(GHOST.INKY);
		RulesAction INKYrunsAwayEdibleGhosts = new MoveAwayGhostAction(GHOST.INKY);
		RulesAction INKYrunsToProtectingGhosts = new GetCloseToAliveGhostAction(GHOST.INKY);
		RulesAction INKYblocksPowerPills = new BlockClosePPAction(GHOST.INKY);
		RulesAction INKYblocksNextJunction = new BlockNextJuntionAction(GHOST.INKY);
		RulesAction INKYprotect = new ProtectAction(GHOST.INKY);
		RulesAction INKYblockSection = new BlockSectionAction(GHOST.INKY);
		RulesAction INKYSectionActions =new MoveToEmptySectionAction(GHOST.INKY);
		//Action de Pinky
		RulesAction PINKYchases = new ChaseAction(GHOST.PINKY);
		RulesAction PINKYrunsAway = new RunAwayAction(GHOST.PINKY);
		RulesAction PINKYrunsAwayMSPACMANclosePPill = new MoveAwayPPAction(GHOST.PINKY);
		RulesAction PINKYrunsAwayEdibleGhosts = new MoveAwayGhostAction(GHOST.PINKY);
		RulesAction PINKYrunsToProtectingGhosts = new GetCloseToAliveGhostAction(GHOST.PINKY);
		RulesAction PINKYblocksPowerPills = new BlockClosePPAction(GHOST.PINKY);
		RulesAction PINKYblocksNextJunction = new BlockNextJuntionAction(GHOST.PINKY);
		RulesAction PINKYprotect = new ProtectAction(GHOST.PINKY);
		RulesAction PINKYblockSection = new BlockSectionAction(GHOST.PINKY);
		RulesAction PINKYSectionActions =new MoveToEmptySectionAction(GHOST.PINKY);
		//Action de SUE
		RulesAction SUEchases = new ChaseAction(GHOST.SUE);
		RulesAction SUErunsAway = new RunAwayAction(GHOST.SUE);
		RulesAction SUErunsAwayMSPACMANclosePPill = new MoveAwayPPAction(GHOST.SUE);
		RulesAction SUErunsAwayEdibleGhosts = new MoveAwayGhostAction(GHOST.SUE);
		RulesAction SUErunsToProtectingGhosts = new GetCloseToAliveGhostAction(GHOST.SUE);
		RulesAction SUEblocksPowerPills = new BlockClosePPAction(GHOST.SUE);
		RulesAction SUEblocksNextJunction = new BlockNextJuntionAction(GHOST.SUE);
		RulesAction SUEprotect = new ProtectAction(GHOST.SUE);
		RulesAction SUEblockSection = new BlockSectionAction(GHOST.SUE);
		RulesAction SUESectionActions =new MoveToEmptySectionAction(GHOST.SUE);
		
		
		map.put("BLINKYchases", BLINKYchases);
		map.put("BLINKYrunsAway", BLINKYrunsAway);
		map.put("BLINKYrunsAwayMSPACMANclosePPill", BLINKYrunsAwayMSPACMANclosePPill);
		map.put("BLINKYrunsAwayEdibleGhosts", BLINKYrunsAwayEdibleGhosts);
		map.put("BLINKYrunsToProtectingGhosts", BLINKYrunsToProtectingGhosts);
		map.put("BLINKYblocksPowerPills", BLINKYblocksPowerPills);
		map.put("BLINKYblocksNextJunction", BLINKYblocksNextJunction);
		map.put("BLINKYprotect", BLINKYprotect);
		map.put("BLINKYblockSection", BLINKYblockSection);
		map.put("BLINKYSectionActions", BLINKYSectionActions);
		
		map.put("INKYchases", INKYchases);
		map.put("INKYrunsAway", INKYrunsAway);
		map.put("INKYrunsAwayMSPACMANclosePPill", INKYrunsAwayMSPACMANclosePPill);
		map.put("INKYrunsAwayEdibleGhosts", INKYrunsAwayEdibleGhosts);
		map.put("INKYrunsToProtectingGhosts", INKYrunsToProtectingGhosts);
		map.put("INKYblocksPowerPills", INKYblocksPowerPills);
		map.put("INKYblocksNextJunction", INKYblocksNextJunction);
		map.put("INKYprotect", INKYprotect);
		map.put("INKYblockSection", INKYblockSection);
		map.put("INKYSectionActions", INKYSectionActions);
		
		map.put("PINKYchases", PINKYchases);
		map.put("PINKYrunsAway", PINKYrunsAway);
		map.put("PINKYrunsAwayMSPACMANclosePPill", PINKYrunsAwayMSPACMANclosePPill);
		map.put("PINKYrunsAwayEdibleGhosts", PINKYrunsAwayEdibleGhosts);
		map.put("PINKYrunsToProtectingGhosts", PINKYrunsToProtectingGhosts);
		map.put("PINKYblocksPowerPills", PINKYblocksPowerPills);
		map.put("PINKYblocksNextJunction", PINKYblocksNextJunction);
		map.put("PINKYprotect", PINKYprotect);
		map.put("PINKYblockSection", PINKYblockSection);
		map.put("PINKYSectionActions", PINKYSectionActions);
		
		map.put("SUEchases", SUEchases);
		map.put("SUErunsAway", SUErunsAway);
		map.put("SUErunsAwayMSPACMANclosePPill", SUErunsAwayMSPACMANclosePPill);
		map.put("SUErunsAwayEdibleGhosts", SUErunsAwayEdibleGhosts);
		map.put("SUErunsToProtectingGhosts", SUErunsToProtectingGhosts);
		map.put("SUEblocksPowerPills", SUEblocksPowerPills);
		map.put("SUEblocksNextJunction", SUEblocksNextJunction);
		map.put("SUEprotect", SUEprotect);
		map.put("SUEblockSection", SUEblockSection);
		map.put("SUESectionActions", SUESectionActions);

		ghostRuleEngines = new EnumMap<GHOST,RuleEngine>(GHOST.class);
		for(GHOST ghost: GHOST.values())
		{
			String rulesFile = String.format("%s%srules.clp", RULES_PATH, ghost.name().toLowerCase());
			String sectionsRulesFile = String.format("%sSections.clp", RULES_PATH);
			RuleEngine engine  = new RuleEngine(ghost.name(),rulesFile, map);
			sectionengine = new RuleEngine(ghost.name(),sectionsRulesFile, map);
			ghostRuleEngines.put(ghost, engine);
			
			//add observer to every Ghost
			//ConsoleRuleEngineObserver observer = new ConsoleRuleEngineObserver(ghost.name(), true);
			//engine.addObserver(observer);
		}
		
		//add observer only to BLINKY
		ConsoleRuleEngineObserver observer = new ConsoleRuleEngineObserver(GHOST.BLINKY.name(), true);
		ghostRuleEngines.get(GHOST.BLINKY).addObserver(observer);
		
	}

	@Override
	public EnumMap<GHOST, MOVE> getMove(Game game, long timeDue) {
		
		//Process input
		RulesInput input = new GhostsInput(game);
		//load facts
		//reset the rule engines
		sectionengine.reset();

		for(RuleEngine engine: ghostRuleEngines.values()) {
			engine.reset();
			engine.assertFacts(input.getFacts());
		}

		
		EnumMap<GHOST,MOVE> result = new EnumMap<GHOST,MOVE>(GHOST.class);		
		for(GHOST ghost: GHOST.values())
		{
			RuleEngine engine = ghostRuleEngines.get(ghost);
			MOVE move = engine.run(game);
			result.put(ghost, move);
		}
		
		return result;
	}

}
